<?xml version="1.0" encoding="utf-8"?>
<mx:Panel title="Red" width="100%" height="100%" verticalAlign="middle" horizontalAlign="center" borderColor="#CCCCCC" paddingBottom="5" horizontalGap="5" xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:ravis="org.un.cava.birdeye.ravis.graphLayout.visual.*"
	xmlns:lc="org.un.cava.birdeye.ravis.components.ui.controls.layouterControls.*"
	xmlns:dp="org.un.cava.birdeye.ravis.components.ui.dataPresentation.*"
	xmlns:grafo="sna.analisis.*">

	<mx:Metadata>
		[Event(name="nodeSelected", type="sna.analisis.ravis.NodeSelectedEvent")]
	</mx:Metadata>
	
	<mx:RemoteObject id="redesService" destination="redesService" showBusyCursor="true">
		<mx:method name="getGrafo" result="crearGrafos(event)"/>
	</mx:RemoteObject>
	
	<mx:RemoteObject id="caminoService" destination="redesService">
		<mx:method name="getCaminoMasCorto" result="mostrarCaminoMasCorto(event)"/>
	</mx:RemoteObject>
	
	<mx:VBox id="listaGrafos" width="100%" height="100%" verticalScrollPolicy="auto"/>
	
	<mx:Script>
		<![CDATA[
			import sna.analisis.renderers.nodes.SNANodeRenderer;
			import org.un.cava.birdeye.ravis.graphLayout.visual.IVisualNode;
			import sna.analisis.ravis.NodeSelectedEvent;
			import mx.containers.GridRow;
			import mx.containers.GridItem;
			import mx.collections.ArrayCollection;
			import mx.events.FlexEvent;
			import mx.events.ListEvent;
			import mx.controls.Alert;
			import mx.rpc.events.ResultEvent;
			
			public function refresh():void {
				redesService.getGrafo(puntoDeVistaId as int, datoMaestroId as int, filtro);
			}
			
			[Bindable("nodeSelected")]
			public function get selectedNode1Id():int {
				if(selectedNode1 == null) {
					return 0;
				}
				return selectedNode1.data.@id;
			}
			
			[Bindable("nodeSelected")]
			public function get selectedNode2Id():int {
				if(selectedNode2 == null) {
					return 0;
				}
				return selectedNode2.data.@id;
			}
			
			public var puntoDeVistaId:Object;

			public var datoMaestroId:Object;
			
			public function set areaId(value:Object):void {
				filtro.areaId = value as int;
			}

			public function set puestoId(value:Object):void {
				filtro.puestoId = value as int;
			}

			public function set seniorityId(value:Object):void {
				filtro.seniorityId = value as int;
			}
			
			private var filtro:Filtro = new Filtro();
			
			private var columnaActual:int;
			
			private var rowActual:GridRow;
			
			public var selectedNode1:IVisualNode = null;
			public var selectedNode2:IVisualNode = null;
			
			private var grafos:ArrayCollection = new ArrayCollection();
			
			private function crearGrafos(event:ResultEvent):void {
				selectedNode1 = null;
				selectedNode2 = null;
				
				dispatchEvent(new NodeSelectedEvent(NodeSelectedEvent.NODE_SELECTED,null));
				
				for each(var grafoViejo:GrafoRavis in grafos) {
					listaGrafos.removeChild(grafoViejo);
				}
				
				grafos = new ArrayCollection();
				var xmlData:XMLList = new XMLList(redesService.getGrafo.lastResult)
				
				//grid.removeAllChildren();
				//columnaActual = 0;
				
				for each(var xmlGraph:XML in xmlData) {
					var grafo:GrafoRavis = new GrafoRavis();
					grafo.percentHeight = 100;
					grafo.percentWidth = 100;
					grafo.xmlData = xmlGraph;
					grafo.addEventListener(FlexEvent.CREATION_COMPLETE, initGrafo);
					grafo.addEventListener(NodeSelectedEvent.NODE_SELECTED, nodeSelected);
					addGrafo(grafo);
				}
			}
			
			private function addGrafo(grafo:GrafoRavis):void {
				listaGrafos.addChild(grafo);
				grafos.addItem(grafo);	
			}
			
			private function initGrafo(event:FlexEvent):void {
				(event.target as GrafoRavis).init();
			}
			
			private function nodeSelected(e:NodeSelectedEvent):void {
				
				if(selectedNode1 == e.node) {
					selectedNode1 = null;
					(e.node.view as SNANodeRenderer).unselect();
				} else if (selectedNode2 == e.node) {
					selectedNode2 = null;
					(e.node.view as SNANodeRenderer).unselect();
				} else if (selectedNode1 == null) {
					selectedNode1 = e.node;
					(e.node.view as SNANodeRenderer).select();
				} else if (selectedNode2 == null) {
					selectedNode2 = e.node;
					(e.node.view as SNANodeRenderer).select();
				}
				
				if(selectEnabled()) {
					caminoService.getCaminoMasCorto(selectedNode1Id, selectedNode2Id);
				}
				
				for each(var grafo:GrafoRavis in grafos) {
					grafo.vgraph.selectedNode1 = selectedNode1;
					grafo.vgraph.selectedNode2 = selectedNode2;
				}
				
				dispatchEvent(e);
			}
			
			private function selectEnabled():Boolean {
				return datoMaestroId == null && !filtro.isEnabled();
			}
			
			private function mostrarCaminoMasCorto(e:ResultEvent):void {
				var relaciones:ArrayCollection = e.result as ArrayCollection;
				
				for each(var grafo:GrafoRavis in grafos) {
					grafo.vgraph.select(relaciones);
				}
			}
			
		]]>
	</mx:Script>
		
</mx:Panel>
