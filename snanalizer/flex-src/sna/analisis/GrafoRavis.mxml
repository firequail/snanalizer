<?xml version="1.0" encoding="utf-8"?>
<mx:Panel xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:ravis="sna.analisis.ravis.*"
	xmlns:lc="org.un.cava.birdeye.ravis.components.ui.controls.layouterControls.*"
	xmlns:dp="org.un.cava.birdeye.ravis.components.ui.dataPresentation.*"
	width="100%" height="100%">
	
	<mx:Metadata>
		[Event(name=NodeSelectedEvent.NODE_SELECTED, type="sna.analisis.ravis.NodeSelectedEvent")]
	</mx:Metadata>
	
	<mx:HBox width="100%" height="100%">
		<ravis:BirdEyeZoom id="zoom" height="100%"/>
		<ravis:VisualGraph id="vgraph" width="100%" height="100%" 
			paddingBottom="5" left="0" right="0" top="0" bottom="0"
			backgroundColor="#FFFFFF" alpha="1"
			itemRenderer="sna.analisis.renderers.nodes.SNANodeRenderer"
			edgeLabelRenderer="sna.analisis.renderers.edgelabels.mxml.basicEdgeLabelRenderer">
		</ravis:VisualGraph>
	</mx:HBox>
	
	<mx:Script>
		<![CDATA[
			import org.un.cava.birdeye.ravis.utils.events.VGraphEvent;
			import mx.controls.Alert;
			import sna.analisis.ravis.NodeSelectedEvent;
			import mx.binding.utils.BindingUtils;
			import mx.rpc.events.ResultEvent;
			import org.un.cava.birdeye.ravis.graphLayout.layout.ForceDirectedLayouter;
			import org.un.cava.birdeye.ravis.graphLayout.visual.edgeRenderers.FlowEdgeRenderer;
			import org.un.cava.birdeye.ravis.graphLayout.visual.edgeRenderers.FlowCurveEdgeRenderer;
			import org.un.cava.birdeye.ravis.graphLayout.visual.edgeRenderers.DirectedBalloonEdgeRenderer;
			import org.un.cava.birdeye.ravis.graphLayout.layout.CircularLayouter;
			import org.un.cava.birdeye.ravis.graphLayout.visual.edgeRenderers.DirectedArrowEdgeRenderer;
			import sna.analisis.renderers.edges.SNAEdgeRenderer;

			import org.un.cava.birdeye.ravis.graphLayout.data.INode;
			import org.un.cava.birdeye.ravis.graphLayout.data.IGraph;
			import org.un.cava.birdeye.ravis.graphLayout.data.Graph;			
			import org.un.cava.birdeye.ravis.graphLayout.visual.VisualNode;
			import org.un.cava.birdeye.ravis.graphLayout.visual.IVisualNode;
			import org.un.cava.birdeye.ravis.graphLayout.visual.IVisualGraph;
			import org.un.cava.birdeye.ravis.graphLayout.visual.IEdgeRenderer;
			import org.un.cava.birdeye.ravis.graphLayout.layout.ILayoutAlgorithm;
			import org.un.cava.birdeye.ravis.graphLayout.layout.ConcentricRadialLayouter;
			import org.un.cava.birdeye.ravis.graphLayout.visual.VisualGraph;			
			import org.un.cava.birdeye.ravis.components.renderers.nodes.RotatedRectNodeRenderer;
			
			import sna.analisis.renderers.nodes.mxml.basicNodeRenderer;
			import sna.analisis.renderers.edgelabels.mxml.basicEdgeLabelRenderer;

			// graph datastructure object
			private var graph:IGraph;
			// active layouter
			private var layouter:ILayoutAlgorithm;
			// edge renderer
			private var selectedEdgeRenderer:IEdgeRenderer;
			// root node to start with
			private var startRoot:IVisualNode;
			// this is used to display the number of visible items
			private var itemCount:int = 0;
			// important to ensure we are done with the main initialisation
			private var initDone:Boolean = false;
			
			public var xmlData:XML;
			
			private function nodeSelected(e:NodeSelectedEvent):void {
				dispatchEvent(e);
			}
			
			public function init():void {
				
				/* create and init a graph object with the XML data */
				graph = new org.un.cava.birdeye.ravis.graphLayout.data.Graph("XMLAsDocsGraph",false,xmlData);
				
				/* set the graph in the VGraph object, this automatically
				 * initializes the VGraph items; 
				 * note: vgraph is the id of the mxml specified VisualGraph component */
				vgraph.graph = graph;
				
				/* set the default layouter type */
				layouter = new ConcentricRadialLayouter(vgraph);
				//layouter = new ForceDirectedLayouter(vgraph);
				//layouter = new CircularLayouter(vgraph);
				vgraph.layouter = layouter;
				
				/* set autofit */
				layouter.autoFitEnabled = false;
				//layouter.linkLength = 75;
				
				/* create and set an EdgeRenderer */
				vgraph.edgeRenderer = new SNAEdgeRenderer(vgraph.edgeDrawGraphics);
				//vgraph.edgeRenderer = new FlowEdgeRenderer(vgraph.edgeDrawGraphics);
				
				/* set the visibility limit options, default 2 
				 * a.k.a degrees of separation */
				//vgraph.maxVisibleDistance = 2;
				vgraph.visibilityLimitActive = false;
				
				/* select a root node, most layouters requires a root node
				 * Note: Id 1 is referring to node id in the XML file */
				//startRoot = graph.nodeByStringId("1").vnode;
						
				/* set if edge labels should be displayed */
				vgraph.displayEdgeLabels = true;

				/* the following kicks it off .... */
				//vgraph.currentRootVNode = startRoot;
				vgraph.currentRootVNode = graph.nodes[0].vnode;
				
				zoom.vgraph = vgraph;
				
				initDone = true;
				vgraph.draw();
				
				vgraph.addEventListener(NodeSelectedEvent.NODE_SELECTED, nodeSelected);
			}
		]]>
	</mx:Script>					

</mx:Panel>
