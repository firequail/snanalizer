<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:ravis="org.un.cava.birdeye.ravis.graphLayout.visual.*"
	xmlns:lc="org.un.cava.birdeye.ravis.components.ui.controls.layouterControls.*"
	xmlns:dp="org.un.cava.birdeye.ravis.components.ui.dataPresentation.*"
	xmlns:analisis="sna.analisis.composite.*"
	width="100%" height="100%">

	<mx:RemoteObject id="redesService" destination="redesService">
		<mx:method name="getGrafo" result="initData(event)"/>
	</mx:RemoteObject>
	
	<mx:RemoteObject id="usuariosService" destination="usuariosService"/>

	<mx:Script>
		<![CDATA[
			import mx.binding.utils.BindingUtils;
			import mx.rpc.events.ResultEvent;
			import org.un.cava.birdeye.ravis.graphLayout.layout.ForceDirectedLayouter;
			import org.un.cava.birdeye.ravis.graphLayout.visual.edgeRenderers.FlowEdgeRenderer;
			import org.un.cava.birdeye.ravis.graphLayout.visual.edgeRenderers.FlowCurveEdgeRenderer;
			import org.un.cava.birdeye.ravis.graphLayout.visual.edgeRenderers.DirectedBalloonEdgeRenderer;
			import org.un.cava.birdeye.ravis.graphLayout.layout.CircularLayouter;
			import org.un.cava.birdeye.ravis.graphLayout.visual.edgeRenderers.CircularEdgeRenderer;
			import org.un.cava.birdeye.ravis.graphLayout.visual.edgeRenderers.DirectedArrowEdgeRenderer;
			import org.un.cava.birdeye.ravis.graphLayout.visual.edgeRenderers.BaseEdgeRenderer;

			import org.un.cava.birdeye.ravis.graphLayout.data.INode;
			import org.un.cava.birdeye.ravis.graphLayout.data.IGraph;
			import org.un.cava.birdeye.ravis.graphLayout.data.Graph;			
			import org.un.cava.birdeye.ravis.graphLayout.visual.VisualNode;
			import org.un.cava.birdeye.ravis.graphLayout.visual.IVisualNode;
			import org.un.cava.birdeye.ravis.graphLayout.visual.IVisualGraph;
			import org.un.cava.birdeye.ravis.graphLayout.visual.IEdgeRenderer;
			import org.un.cava.birdeye.ravis.graphLayout.layout.ILayoutAlgorithm;
			import sna.analisis.composite.layouters.ConcentricRadialLayouter;
			import org.un.cava.birdeye.ravis.graphLayout.visual.edgeRenderers.BaseEdgeRenderer;
			import org.un.cava.birdeye.ravis.graphLayout.visual.VisualGraph;			
			import org.un.cava.birdeye.ravis.components.renderers.nodes.RotatedRectNodeRenderer;
			
			// These are the item renderers
			import sna.analisis.renderers.nodes.mxml.basicNodeRenderer;
			import sna.analisis.renderers.edgelabels.mxml.basicEdgeLabelRenderer;

			/* 
			 * The following local variables hold various
			 * important object references
			 */

			// graph datastructure object
			private var graph:IGraph;
			// active layouter
			private var layouter:ILayoutAlgorithm;
			// edge renderer
			private var selectedEdgeRenderer:IEdgeRenderer;
			// root node to start with
			private var startRoot:IVisualNode;
			// this is used to display the number of visible items
			private var itemCount:int = 0;
			// important to ensure we are done with the main initialisation
			private var initDone:Boolean = false;
			
			private var _puntoDeVistaId:int;
			
			public function set puntoDeVistaId(value:int):void {
				_puntoDeVistaId = value;
				//refresh();
			}
			
			public function refresh():void {
				redesService.getGrafo(_puntoDeVistaId);
			}
			
			private function initData(event:ResultEvent):void {
				initGraph();
			}
			
			/**
			 * event handler for HTTPService, does all the remaining required
			 * initialisation
			 * */
			private function initGraph():void {
				var xmlData:XML = new XML(redesService.getGrafo.lastResult);
				
				/* create and init a graph object with the XML data */
				graph = new org.un.cava.birdeye.ravis.graphLayout.data.Graph("XMLAsDocsGraph",false,xmlData);
				
				/* set the graph in the VGraph object, this automatically
				 * initializes the VGraph items; 
				 * note: vgraph is the id of the mxml specified VisualGraph component */
				vgraph.graph = graph;
				
				/* set the default layouter type */
				layouter = new ConcentricRadialLayouter(vgraph);
				//layouter = new ForceDirectedLayouter(vgraph);
				//layouter = new CircularLayouter(vgraph);
				vgraph.layouter = layouter;
				
				/* set autofit */
				layouter.autoFitEnabled = true;
				
				/* create and set an EdgeRenderer */
				vgraph.edgeRenderer = new BaseEdgeRenderer(vgraph.edgeDrawGraphics);
				//vgraph.edgeRenderer = new FlowEdgeRenderer(vgraph.edgeDrawGraphics);
				
				/* set the visibility limit options, default 2 
				 * a.k.a degrees of separation */
				vgraph.maxVisibleDistance = 2;
				
				/* select a root node, most layouters requires a root node
				 * Note: Id 1 is referring to node id in the XML file */
				//startRoot = graph.nodeByStringId("1").vnode;
						
				/* set if edge labels should be displayed */
				vgraph.displayEdgeLabels = false;
				
				/* the following kicks it off .... */
				//vgraph.currentRootVNode = startRoot;
				vgraph.currentRootVNode = graph.nodes[0].vnode;				
				initDone = true;
				vgraph.draw();
			}
		]]>
	</mx:Script>					

	<analisis:VisualGraph id="vgraph" width="100%" height="100%" 
		paddingBottom="5" left="0" right="0" top="0" bottom="0"
		backgroundColor="#FFFFFF" alpha="1" backgroundAlpha="0"
		itemRenderer="sna.analisis.renderers.nodes.mxml.basicNodeRenderer"
		edgeLabelRenderer="sna.analisis.renderers.edgelabels.mxml.basicEdgeLabelRenderer"
		visibilityLimitActive="true">
	</analisis:VisualGraph>	
</mx:Canvas>
